import { getNodesForDir, getFileFromPath, limitString } from "./utils";
import Akord from "@akord/akord-js";

const pushDirToVault = async (directory: any, akord: Akord, name: string, termsOfService:string) => {
  console.log("üõ´ akord-sync initating with args", name);
  // a node is generated for each folder and file in the directory.
  // the nodes are arranged as a DAG, representing the folder
  var nodes = getNodesForDir(directory, null, null);
  console.log(nodes.length, "nodes to push");

  console.log(nodes.map((e)=>e.file));
  // we are going to remember the folderIds generated by protocol for easy lookup
  var parentIdMap = {};
  // now we flatten the DAG and sort it by dependencies.
  var vaultId:string = null;
  var termsOfAccess:string = "(not yet implemented)"
  for (const node of nodes) {
    switch (node.node) {
      case "root":
        console.log(" üîê ", "Creating Vault (name):", name);
        const vault = await akord.vaultCreate(
            name,
            termsOfAccess
            );
        console.log("akord response", vault)
        vaultId = vault.vaultId;
        console.log("        Vault ID:", vault.vaultId);
        console.log("  transaction ID:", vault.transactionId)
        break;
      case "folder":
        console.log(" üìÇ ", "Creating Folder (name/parent):", limitString(node.name), node.parent);
        var folder = await akord.folderCreate(
          vaultId,
          node.name,
          parentIdMap[node.parent]
        );
        parentIdMap[node.name] = folder.folderId;
        console.log("     Folder ID:", folder.folderId);
        break;
      case "stack":
        console.log(" üìú ", "Creating Stack (name, folder, file)", limitString(node.name), limitString(node.folder), limitString(node.file));
        const file_to_upload = await getFileFromPath(node.file);
        var stack = await akord.stackCreate(
          vaultId,
          file_to_upload,
          node.name,
          parentIdMap[node.folder]
        );
        console.log("     Stack ID:", stack.stackId);
        break;
      case "note":
        console.log(" üìù ", "Creating Note (name, folder, file)", limitString(node.name), limitString(node.folder), limitString(node.file));
        const note_to_upload = await getFileFromPath(node.file);
        var note = await akord.noteCreate(
          vaultId,
          node.name,
          JSON.stringify(note_to_upload.data.toString("utf8")),
          parentIdMap[node.folder]
        );
        console.log("     Note ID:", note.noteId);
        console.log("     Parent ID:", parentIdMap[node.folder]);
        break;
        default:
            console.log("Unhandled command", node.node)
    }
    console.log();
  }
};

export {
    pushDirToVault
}

